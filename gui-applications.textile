h2. Why are GUIs single-threaded

Modern GUI frameworks create a dedicated event dispatch loop (EDT) for handling GUI events. The reason is that multithreaded GUI frameworks tend to be susceptible to deadlock:
* Unfortunate interaction between input event processing and any sensible object oriented modeling of GUI components. Actions initiated by the user tend to "bubble up" from the OS to the application. Application-initiated actions "bubble down" from the application to the OS. Combining this tendency for activities to access the same GUI objects in the opposite order with the requirement of making each object thread-safe yields a recipe for inconsistent lock ordering, which leads to deadlock.
* The prevalence of Model-View-Controller pattern. Facroting user interactions into cooperating model, view and controller objects greatly simplifies implementing GUI applications, but raises the risk of inconsistent lock ordering.

h4. Sequential event processing

GUI applications are oriened around processing fine-grained events such as mouse clicks.
* Because there is only a single thread for processing GUI tasks, they are processed sequentially and no tasks overlap. This makes writing tasks easier -- you don't have to worry about interference from other tasks.
* The downside is that if one task takes too long to execute, other tasks must wait unil it is finished. If those other tasks are responsible for responding to user input or providing visual feedback the UI will appear frozen, even "Cancel" button will become unresponsible. You must run such tasks in another thread. Nevertheless, you will have to send notifications to GUI thread and handle cancelation, so things can get complicated quickly. 

h4. Thread confinement in Swing

All Swing components and data model objects are kept consistent not by synchronization but by thread confinement: they are confined to the event thread. Any code that accesses these objects must be run in the event thread.
* You don't need to worry about synchronization
* You can't access presentation objects from outside the event thread at all

Few exceptins, of course:
* *SwingUtilities.isEventDispatchThread* -- determines whether the current thread is the event thread
* *SwingUtilities.invokeLater* -- schedules a *Runnable* for execution on the event thread
* *SwingUtilities.invokeAndWait* -- schedules a *Runnable* for execution on the event thread and blocks the current thread until it completes (callable from a non-GUI thread only)
* methods to enqueue a repaint or revalidation request on the event queue
* methods for adding or removing listeners

The Swing event thread can be thought of as a single-threaded Executor that processes tasks from the event queue. The worker thread sometimes dies and is replaced by a new one, but this should be transparent to tasks.

h2. Short-running GUI tasks

In a GUI application, events originate in the event thread and bubble up to application-provided listeners, which will probably perform some computation that affects the presentation object. For simple, short-running tasks, the entire action can stay in the event thread; for longer-running tasks, some of the processing should be offloaded to another thread.

h2. Long-running GUI tasks

h2. Shared data models

h2. Other forms of single-threaded sussystems