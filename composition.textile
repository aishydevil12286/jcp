h2. Composing objects

h3. Designing a Thread-safe Class

What is object's state? State starts with fields
* If they are of primitive types
* If the object has fields that are references to other objects, its state will encompass fields from the referenced objects as well (consider state ownership)

Ownership
* Responsible for
* Split ownership

Types of state:
* Fields
* Set of fields

State synchronization requirements
* Invariants validate state space
* Post conditions validate state transitions
* Pre-conditions

Designing a thread-safe class:
* Identify object's state
* Identify the invariants, post- and pre-conditions that constraint object's state
* Establish a policy for managing concurrent access to the object's state

h3. Instance confinement (not thread safe components)

Types, may be confined to:
* class instance
* lexical scope
* thread

Why use confinement? All codes pathes that lead to confined object are known and can be analyzed. Combined confinement and locking can ensure that non-thread-safe objects are used in a thread-safe manner. Java monitor pattern may be used for synchronization. But private locks has an advantage in that they are encapsulated (monitor is not). Also, copying may be used.

h3. Delegating thread safety (thread safe components)



h3. Adding functionality to thread safe classes

h3. Documenting synchronization policies