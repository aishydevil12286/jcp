h2. Implicit couplings between tasks and execution policies

Executor framework decouples task submission from task execution. But there are many tasks that require specific execution policies:
* *Dependent tasks* create constraints on the execution policy that must be carefully managed to avoid liveness problems.
* *Tasks that exploit thred confinement and work in single-threaded executors*. Single-threaded pools make stronger promises about concurency. They guarantee tasks are not executed concurrently, which allows to relax thread safety. Objects can be confined to the thread and accessed without syncrhonization. This forms an implicit coupling between the task and execution policy.
* *Response-time-sensitive tasks*. GUI applications are sensitive to response time. Implicit coupling is the restriction not to submit long running tasks or many tasks to executor.
* *Tasks using ThreadLocal*--threads can be reused between tasks. Hence *ThreadLocal* can be used in thread pools only when lifetime of an object is restricted to a single task. Should not be used in pool threads to communicate between threads.

Thread pools work best when tasks are homogeneous and independent
* mixing long-running and short-running tasks risks clogging the pool
* submitting tasks that depend on each other risks deadlock

Some tasks require or preclude a specific execution policy
* tasks that depend on other tasks require that the thred pool be large enough that tasks are never queued or rejected
* tasks that exploit thread confinement require serial execution

h2. Thread starfvation deadlock

h2. Long running tasks