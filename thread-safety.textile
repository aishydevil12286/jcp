h1. Thread safety

A class is thread safe if it **behaves correctly when accessed from multiple threads**, regardless of the scheduling or interleaving of the execution of those threads by the runtime environment, and with no additional synchronization or other coordination on the part of the calling code.

h1. State issues

h2. Vocabulary

Informally, *an object's state* is its data, stored in state variables such as instance or static fields. An object's state may include fields from other, dependent objects; HashMap's state is partially stored in the HashMap object itself, but also in many Map.Entry objects. An object's state encompasses any data hat can affect its externally visible behavior.

An object is *properly constructed* means that the this reference does not escape during construction.

An object is *published safely* if both the reference to the object and the object's state are made visible to other threads at the same time. A properly constructed object can be safely published by:
* initializing an object reference from a static initializer
* storing a reference to it into a volatile field or AtomicReference
* storing a reference to it into a final field of a properly constructed object
* storing a reference to it into a field that is properly guarded by a lock

*Effectively immutable objects* are those not technically immutable, but whose state will not be modified after publication.

An object is *immutable* if:
* Its state cannot be modified after construction
* All its fields are final
* It is properly constructed

Definition of escape

h2. Categories of thread safety

h3. State type

|_. Type |_. Thread safe? |
| Stateless | Always |
| Immutable | Always |
| Effectively immutable | No |
| Mutable | No |

h3. Effectively immutablee

h3. Mutable

|_. Type |_. Thread safe? |
| Not sharing | Always |
| Sharing | No |
| Escaping | No |

h3. Sharing mutable objects:

* Atomicity
    * Read-modify-write
    * Check-then-act
* Visibility
    * Reordering
    * Stale data
    * Non-atomic 64-bit operations

locks
synchronized block
synchronized method
volatile
thread confinement (ad-hoc, stack-confinement)
make stateless
make immutable
safe publishing