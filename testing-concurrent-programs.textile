Concurrent programs have a degree of non-determenism that sequential programs do not, increasing the number of potential interactions and failure modes that need to be planned for and analyzed.

The same techniques for testing correctness and performance in sequential programs can be applied to concurrent programs:
* but the space of things that can go wrong is much larger
* and potential failures may be rare probabilistic occurences rather than determenistic ones

Tests of concurrent classes usually fall into one or all of the classic categories of safety, liveness and performance
* *tests for safety* verify that class's behavior conforms to its specification, they usually take form of testing invariants
 ** this may require locking a concurrent collection for exclusive access
 ** employing some sort of atomic snapshot
 ** or by using "test points" provided by the implementation that let tests asset invariants or execute test code atomically
 ** test code can unfortunately introduce timing or synchronization artifacts that that can mask bugs that might otherwise manifest themselves
* *tests for liveness*
 ** tests for progress and non-progress are hard to quantify -- how do you verify that a method is blocking and not merely running slowly?
 ** how do you test that an algorithm does not deadlock?
* *performance tests*
 ** *throughput tests* a rate at which a set of concurrent tasks is completed
 ** *responsiveness (latency) tests* the delay between a request for and completion of some actiod
 ** *scalability tests* the improvement in throughput (or lack thereof) as more resources are made available

h2. Testing for correctness

Unit testing a concurrent class starts with the same analysis as for a sequential class -- identifying invariants and post-conditions that are amendable for mechanical checking.

h4. Basic unit tests

Write basic unit test for sequential scenarios, assert invariants and post-conditions. These tests can disclose when a problem is not related to concurrency issues.

h4. Testing blocking operations

Testing that a thread blocks is similar to testing wether an exception is thrown: if finishes successfully, then the test failed.

Testing that a method blocks has *two complications*:
* once a method is blocked, you have to unblock it, which can be solved if the method supports interruptions
* waiting until thread is blocked, have to make a decision about how long the few instructions could possibly take

*Instructions*:
* create a new test thread which performs a blocking operation and either registers failure right after (calling fail()) or cathes an *InterruptedException* which is a success
* test thread waits for specified time, interrupts the test thread, joins it and asserts *assertFalse(newThread.isAlive())*
 ** use timed join -- for the case when blocking gets stuck; the scenario when it is useful to subclass Thread
 ** also tests that blocking method throws *InterruptedException* when blocked and interrupted

*Caution*: don't use *Thread.getState* to verify that the thread is actually in *WAITING* or *TIMED_WAITING* states:
* the JVM can choose to implement blocking by spin-waiting
* spurious wakeups from *Object.wait* or *Condition.await* are permitted, a thread in *WAITING* or *TIMED_WAITING* state may transition to *BLOCKED* and then *RUNNABLE*.
* besides all these reasons, it just may take some time for the target thread to settle into a blocking thread.

h4. Testing safety

* Identifying easily checked properties that will, with high probability, fails if something goes wrong.
* Not letting the failure auditing code limit concurrency artificially. It is best if checking the test propety does not require any synchronization.

Testing consumer-producer designs. Check that everything put into a queue comes out of it, and nothing else does.
* Using shadow list: add elements when added to concurrent collection, remove when removed, check that nothing is left.
** This approach would distort the scheduling of the test threads because modifying the shadow list would require synchronization
* Compute checksums of the elements that are enqueued and dequeued using an order-sensitive checksum function, and compare them. Test passes if they match
** Works best when there is a single producer and consumer
* Compute checksums of the elements that are enqueued and dequeued using an order-insensitive checksum function
** We can't check order but don't have to when multuple producers and consumers are used
** Either multiple checksums must be calculated or a single shared counter used (which may become a bottleneck)

not guessable by the compiler
barriers to achieve fair multithreading
termination criterion, timeouts
why use multiprocessors systems and threads more than CPUs


h4. Testing resource management

h4. Using callbacks

h4. Generating more interleavings



h2. Testing for performance

h2. Avoding performance testing pitfalls

h2. Complementary testing approaches

